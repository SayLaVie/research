// Pseudo code layout of classes that will be used
#include <vector>

using namespace std;

class Player {
private:
	// These heuristic weights are determined via genetic algorithm before
	// the instantiation of the player class.
	vector<int> heuristicWeights;

public:
	Player(vector<int> weights) {heuristicWeights = weights;}
	int play(const Board &board, player whichPlayer); // this function will start the minimax off and return the move to be played.
	int minMax(Board board, player whichPlayer, int depth, int alpha, int beta); // same for everyone
	int heuristic(Board board); // This function will use the weights passed in (neural net)
}





/*************************************************************************************************/

main() {
	while () {
		geneticAlgorithm() // Determine weights for new players
		Player a, b, c.....n // instantiate player classes with new weights

		// Every player plays against one another
		for each Player {
			playHex(Player A, Player B);
		}

		playerRankings() // Some sort of ranking system to feed into genetic algorithm
	}
}


/*************************************************************************************************/
   Notes on Published Papers that I've read

Queensland Thesis
   His approach is similar to ours. They are using an alpha-beta pruning minMax algorithm with a
   depth limit and a heuristic to evaluate the board state at a given depth. However, he uses a
   database of already played games to determine the winnability of a given board. Ours will use
   a neural net to 'learn' how to play the game well.


/*************************************************************************************************/
	Questions

- How many players?

- What size board?
	+ Maybe 6 to start
	+ University of Alberta solved all 8x8 openings (does this mean all games will be won?)
	+ University of Alberta ultra-weakly solved 28/41 asymmetric 9x9 openings

- What sort of output should we use?


/*************************************************************************************************/
   Thoughts

Memoization might make our agent a beter player -- what is the goal, here?
   To make the best playing agent?
   For an agent to learn hex in a similar way to Blondie 24?
   Solving all board states for a certain size hex board?
